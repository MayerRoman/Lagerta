<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2017. EPAM Systems.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://www.springframework.org/schema/beans"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util.xsd">

    <context:annotation-config/>

    <context:property-placeholder properties-ref="shared-properties"/>

    <util:properties id="shared-properties">
        <prop key="configBasePath">/com/epam/lagerta/integration/</prop>
    </util:properties>

    <util:properties id="consumer-properties" location="${configBasePath}consumer.properties"/>
    <util:properties id="recon-consumer-properties" location="${configBasePath}reconciliation_consumer.properties"/>
    <util:properties id="producer-properties" location="${configBasePath}producer.properties"/>
    <util:properties id="recon-producer-properties" location="${configBasePath}reconciliation_producer.properties"/>

    <bean id="base_ignite.cfg" class="org.apache.ignite.configuration.IgniteConfiguration" abstract="true"
          p:gridName="#{T(java.util.UUID).randomUUID().toString()}"
          p:cacheConfiguration-ref="caches"
          p:discoverySpi-ref="discovery-spi"
          p:serviceConfiguration-ref="services"
          p:gridLogger-ref="grid-logger"
          p:atomicConfiguration-ref="atomicConfiguration"/>

    <bean name="atomicConfiguration" class="org.apache.ignite.configuration.AtomicConfiguration"
          p:backups="1"/>

    <bean id="grid-logger" class="org.apache.ignite.logger.slf4j.Slf4jLogger"/>

    <bean id="stateAssistant" class="com.epam.lagerta.subscriber.lead.LeadStateAssistantImpl" scope="prototype"
          c:ignite-ref="ignite-bean"/>

    <bean id="lead" class="com.epam.lagerta.subscriber.lead.LeadImpl" scope="prototype"
          c:stateAssistant-ref="stateAssistant"
          c:gapDetectionStrategy-ref="gapDetector"
          c:reconciler-ref="reconciler"
          c:ruleTimeouts-ref="leadTimeouts"/>

    <bean id="gapDetector" class="com.epam.lagerta.subscriber.lead.DefaultGapDetectionStrategy"/>

    <bean id="leadTimeouts" class="com.epam.lagerta.subscriber.lead.RuleTimeouts"
          c:hearbeatExpirationThreshold="#{T(com.epam.lagerta.subscriber.lead.RuleTimeouts).DEFAULT_HEARTBEAT_EXPIRATION_THRESHOLD}"
          c:saveStatePeriod="#{T(com.epam.lagerta.subscriber.lead.RuleTimeouts).SAVE_STATE_PERIOD}"
          c:gapCheckPeriod="15000"/>

    <bean id="reconciler" class="com.epam.lagerta.mocks.ProxyReconciler">
        <constructor-arg>
            <bean class="com.epam.lagerta.subscriber.lead.ReconcilerImpl"
                  c:kafkaFactory-ref="kafka-factory"
                  c:clusterConfig-ref="cluster-config"
                  c:localLog-ref="local-log"
                  c:serializer-ref="serializer"/>
        </constructor-arg>
    </bean>

    <bean id="reader-config" class="java.lang.Class" factory-method="forName">
        <constructor-arg value="com.epam.lagerta.subscriber.ReaderConfig"/>
    </bean>

    <bean id="lead-service" class="com.epam.lagerta.services.LeadServiceImpl"/>
    <bean id="reader-service" class="com.epam.lagerta.services.ReaderServiceImpl"/>
    <util:list id="services">
        <bean class="org.apache.ignite.services.ServiceConfiguration"
              p:name="#{T(com.epam.lagerta.services.LeadService).NAME}"
              p:maxPerNodeCount="1"
              p:totalCount="1"
              p:service-ref="lead-service"
              p:nodeFilter-ref="serviceFilter"/>
        <bean class="org.apache.ignite.services.ServiceConfiguration"
              p:name="#{T(com.epam.lagerta.services.ReaderService).NAME}"
              p:maxPerNodeCount="1"
              p:service-ref="reader-service"
              p:nodeFilter-ref="serviceFilter"/>
    </util:list>

    <util:list id="caches">
        <ref bean="primitives-cache"/>
        <ref bean="binary-primitives-cache"/>
        <ref bean="primitive-wrappers-cache"/>
        <ref bean="binary-primitive-wrappers-cache"/>
        <ref bean="other-types-cache"/>
        <ref bean="binary-other-types-cache"/>
        <ref bean="atomicCache"/>
    </util:list>

    <bean id="discovery-spi" class="org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi">
        <property name="ipFinder">
            <bean class="org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder">
                <property name="addresses">
                    <list>
                        <value>127.0.0.1:47500..47509</value>
                    </list>
                </property>
            </bean>
        </property>
    </bean>

    <bean id="serviceFilter" class="com.epam.lagerta.ServiceFilterPredicate"/>

    <bean id="cache-loader" class="com.epam.lagerta.resources.DBResourceFactory"
          factory-method="getJDBCDataCapturerLoader"/>

    <bean id="kafka-config" class="com.epam.lagerta.kafka.config.KafkaConfig"
          p:consumerConfig-ref="consumer-properties"
          p:producerConfig-ref="producer-properties"/>

    <bean id="cluster-config" class="com.epam.lagerta.kafka.config.ClusterConfig"
          p:inputTopic="inputTopic"
          p:reconciliationTopic="reconciliation"
          p:gapTopic="gap"
          p:kafkaConfig-ref="kafka-config"/>

    <bean id="local-log" class="com.epam.lagerta.kafka.config.BasicTopicConfig"
          p:topic="txIdTopic"
          p:kafkaConfig-ref="kafka-config"/>

    <bean id="id-config" class="com.epam.lagerta.kafka.config.BasicTopicConfig"
          p:topic="txIdTopic"
          p:kafkaConfig-ref="kafka-config"/>

    <bean id="id-sequencer" class="com.epam.lagerta.kafka.KafkaIdSequencer"
          c:kafkaFactory-ref="kafka-factory"
          c:idConfig-ref="id-config"
          destroy-method="close"/>

    <bean id="key-transformer" class="com.epam.lagerta.capturer.DefaultKeyTransformer"/>

    <bean id="value-transformer" class="com.epam.lagerta.capturer.DefaultValueTransformer"/>

    <bean id="serializer" class="com.epam.lagerta.util.SerializerImpl"/>

    <bean id="committer" class="com.epam.lagerta.resources.DBResourceFactory"
          factory-method="getJDBCCommitter"/>

    <bean id="local-index-config" class="com.epam.lagerta.kafka.config.BasicTopicConfig"
          p:topic="local-index-topic"
          p:kafkaConfig-ref="kafka-config"/>

    <bean id="kafka-log-committer" class="com.epam.lagerta.kafka.KafkaLogCommitterImpl"
          c:kafkaFactory-ref="kafka-factory"
          c:localIndexConfig-ref="local-index-config"/>

    <bean id="kafka-factory" class="com.epam.lagerta.kafka.KafkaFactoryForTests">
        <constructor-arg index="0">
            <bean class="com.epam.lagerta.kafka.KafkaFactoryImpl"/>
        </constructor-arg>
        <constructor-arg index="1" ref="producer-properties"/>
    </bean>

    <bean id="local-log-config" class="com.epam.lagerta.kafka.config.SubscriberConfig" factory-bean="cluster-config"
          factory-method="build"
          c:subscriberId="-"
          c:suspendAllowed="false"/>

    <util:list id="subscriber-configs">
        <ref bean="local-log-config"/>
    </util:list>

    <bean id="producers-manager" class="com.epam.lagerta.kafka.ProducersManager"
          c:kafkaFactory-ref="kafka-factory"
          c:keyTransformer-ref="key-transformer"
          c:valueTransformer-ref="value-transformer"
          c:configs-ref="subscriber-configs"
          c:serializer-ref="serializer"
          destroy-method="close"/>

    <util:list id="key-value-listeners">
        <bean class="com.epam.lagerta.capturer.SynchronousPublisher"
              c:producers-ref="producers-manager"/>
    </util:list>

    <bean id="cache-store-factory" class="com.epam.lagerta.capturer.DataCapturerBusFactory"/>

    <bean id="buffer-overflow" class="com.epam.lagerta.subscriber.SimpleBufferOverflowCondition"
          c:limit="10000"/>

    <!-- Caches configuration -->
    <bean id="cache-base" class="org.apache.ignite.configuration.CacheConfiguration" abstract="true"
          p:readThrough="true"
          p:writeThrough="true"
          p:cacheMode="PARTITIONED"
          p:atomicityMode="TRANSACTIONAL"
          p:backups="2"
          p:cacheStoreFactory-ref="cache-store-factory"/>

    <bean id="primitives-cache" parent="cache-base"
          p:name="#{T(com.epam.lagerta.base.jdbc.common.PrimitivesHolder).CACHE}"/>

    <bean id="binary-primitives-cache" parent="cache-base"
          p:name="#{T(com.epam.lagerta.base.jdbc.common.PrimitivesHolder).BINARY_KEEPING_CACHE}"
          p:storeKeepBinary="true"/>

    <bean id="primitive-wrappers-cache" parent="cache-base"
          p:name="#{T(com.epam.lagerta.base.jdbc.common.PrimitiveWrappersHolder).CACHE}"/>

    <bean id="binary-primitive-wrappers-cache" parent="cache-base"
          p:name="#{T(com.epam.lagerta.base.jdbc.common.PrimitiveWrappersHolder).BINARY_KEEPING_CACHE}"
          p:storeKeepBinary="true"/>

    <bean id="other-types-cache" parent="cache-base"
          p:name="#{T(com.epam.lagerta.base.jdbc.common.OtherTypesHolder).CACHE}"/>

    <bean id="binary-other-types-cache" parent="cache-base"
          p:name="#{T(com.epam.lagerta.base.jdbc.common.OtherTypesHolder).BINARY_KEEPING_CACHE}"
          p:storeKeepBinary="true"/>

    <bean id="atomicCache" class="com.epam.lagerta.util.AtomicsHelper" factory-method="getConfig"/>
</beans>
